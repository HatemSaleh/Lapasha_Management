// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId Int @id @default(autoincrement())
  email String @unique
  password String
}

model Employees{
  employeeId Int @id @default(autoincrement())
  firstName String
  lastName String
  isActive Boolean
  shift Shifts[]
  tip Tips[]
  payroll Payrolls[]

  roleId Int
  role Roles @relation(fields: [roleId], references: [id])
}

model Roles{
  id Int @id @default(autoincrement())
  roleName String @unique
  Salary Float
  hourlyRate Float
  overTimeRate Float

  employee Employees[]
}

model Shifts{
  id Int @id @default(autoincrement())
  workerId Int
  worker Employees @relation(fields: [workerId], references: [employeeId])
  date DateTime @db.Date
  clockInTime DateTime @db.Time()
  clockOutTime DateTime @db.Time()
  breaksTaken Float
  hoursWorked Float

  tip Tips[]
  
}

model Tips{
  tipId Int @id @default(autoincrement())
  workerId Int
  worker Employees @relation(fields: [workerId], references: [employeeId])
  shiftId Int
  shift Shifts @relation(fields: [shiftId],references: [id])

  tipAmount Float
  paidInCashAmount Float //tips paid in cash
  totalTips Float // = tipAmount - paidInCash
}

model Payrolls{
  payrollId Int @id @default(autoincrement())
  workerId Int
  worker Employees @relation(fields: [workerId], references: [employeeId])
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  totalHours Float
  overTime Float
  totalHourlyPay Float
  totalTips Float
  netPay Float
}